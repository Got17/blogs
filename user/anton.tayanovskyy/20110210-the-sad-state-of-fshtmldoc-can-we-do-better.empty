---
title: "The Sad State of fshtmldoc – Can We Do Better?"
categories: "f#"
abstract: "<p>If you ever tried to generate HTML documentation to document the API of F#-produced assemblies, you have likely tried <strong>fshtmldoc</strong>, a tool that is a part of F# PowerPack. It does a few things well and another couple of things not so well, there is a single overarching problem this tool. It uses System.Reflection.</p><p>Why is System.Reflection evil? In fact it is not, it is simply an API designed for a purpose vastly different from ours (HTML API report generation). The side effects of using these APIs are: the runtime needs to load the documented assemblies, and their references, which is slow and error-prone. <strong>fshtmldoc</strong> often crashes as it cannot find a reference. Also, the runtime cannot unload these assemblies. So, using this from an MS Build task, for example, is not an option, as it can make your Visual Studio session leak memory.</p><p><strong>Is there an alternative?</strong> A non-alternative is to use C#-centric tools such as monodoc or SandCastle. These tools do not know anything about F# constructs, and are likely to produce output that will easily confuse you for code that is highly functional – full of function types, unions, records.</p><p><strong>Enter Mono.Cecil. </strong>There is the alternative reflection and bytecode-manipulation library. It addresses all of the above problems. Could we base a documentation tool on Cecil? Yes. All that needs to be done, is to detect F# constructs from metadata.</p><p>The good news is I have almost completed this – remaining tasks are fairly minor. I am testing this out on a bunch of our IntelliFactory assemblies. More coming soon..</p><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6028449519062514692-4328986878596047007?l=t0yv0.blogspot.com' alt='' /></div>"
identity: "2081,74913"
---
