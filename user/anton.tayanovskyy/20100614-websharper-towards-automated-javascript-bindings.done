---
title: "WebSharper™: Towards Automated JavaScript Bindings"
categories: "websharper,f#,intellifactory"
abstract: "<p><em  >Cross-posted from the IntelliFactory <a href=\"http://intellifactory.com/blogs/\"    >blog</a    >.</em  ></p><p><em  >This blog describes the pre-release <a href=\"http://doiop.com/wsp-ef\"    >WebSharper™ Extensibility Framework</a    >.</em  ></p><p>How would I call reasonably complex JavaScript functions from WebSharper™? For an example, consider <a href=\"http://api.jquery.com/jQuery.ajax/\"  >jQuery.ajax</a  >.</p><p>A first attempt would look like this:</p><pre class=\"sourceCode ocaml\"><code  ><span class=\"Normal NormalText\"    >[&lt;</span    ><span class=\"Normal Identifier\"    >Inline</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"String\"    >&quot;jQuery.ajax($settings)&quot;</span    ><span class=\"Normal NormalText\"    >&gt;]</span    ><br     /><span class=\"Keyword\"    >let</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"Normal Identifier\"    >ajax</span    ><span class=\"Normal NormalText\"    > (</span    ><span class=\"Normal Identifier\"    >settings</span    ><span class=\"Normal NormalText\"    >: </span    ><span class=\"Normal Identifier\"    >obj</span    ><span class=\"Normal NormalText\"    >) : </span    ><span class=\"Normal Identifier\"    >obj</span    ><span class=\"Normal NormalText\"    > = </span    ><span class=\"Normal Identifier\"    >null</span    ><br     /></code  ></pre><p>This is hardly acceptable as it throws away all the information present on the documentation page and makes it the user's responsibility to figure out what exactly the <code  >ajax</code  > function expects. But spelling out the precise types requires a lot more work.</p><p>In practice, a big part of WebSharper™ codebase turns out to consist of stubs like these - classes and functions that instruct F# how to call a particular JavaScript API (think jQuery, Ext JS) and provide types for the API. <strong  >The WebSharper™ JavaScript-binding code is repetitive</strong  >, tedious to write and maintain and not straightforward to generate.</p><p>At IntelliFactory we have been exprimenting with several approaches to the problem, culminating in something we currently call the <em  >Extensibility Framework</em  >, or EF for short. The basic idea behind EF is that instead of writing the bindings by hand, we use an F#-embedded DSL to describe them.</p><p><code  >jQuery.ajax</code  > with EF might look like this:</p><pre class=\"sourceCode ocaml\"><code  ><span class=\"Keyword\"    >let</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"Keyword\"    >private</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"Normal Identifier\"    >AjaxConfig</span    ><span class=\"Normal NormalText\"    > =</span    ><br     /><span class=\"Normal NormalText\"    >    </span    ><span class=\"Normal Identifier\"    >Pattern</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >Config</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"String\"    >&quot;AjaxConfig&quot;</span    ><span class=\"Normal NormalText\"    > [] [</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;async&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >bool</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;beforeSend&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >J</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >XMLHttpRequest</span    ><span class=\"Normal NormalText\"    > ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >unit</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;cache&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >bool</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;complete&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >J</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >XMLHttpRequest</span    ><span class=\"Normal NormalText\"    > * </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >string</span    ><span class=\"Normal NormalText\"    >&gt; ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >unit</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;contentType&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >string</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"String\"    >&quot;context&quot;</span    ><span class=\"Normal NormalText\"    > =~ </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"Normal Identifier\"    >obj</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        // ..</span    ><br     /><span class=\"Normal NormalText\"    >    ]</span    ><br     /><br     /><span class=\"Normal NormalText\"    >    </span    ><span class=\"Keyword\"    >let</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"Keyword\"    >private</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"Normal Identifier\"    >JQueryClass</span    ><span class=\"Normal NormalText\"    > =</span    ><br     /><span class=\"Normal NormalText\"    >        </span    ><span class=\"Normal Identifier\"    >Code</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >Class</span    ><span class=\"Normal NormalText\"    > </span    ><span class=\"String\"    >&quot;JQuery&quot;</span    ><br     /><span class=\"Normal NormalText\"    >        |=&gt; </span    ><span class=\"Normal Identifier\"    >JQuery</span    ><br     /><span class=\"Normal NormalText\"    >        |+&gt; [</span    ><br     /><span class=\"Normal NormalText\"    >             </span    ><span class=\"String\"    >&quot;jQuery.ajax&quot;</span    ><span class=\"Normal NormalText\"    > =&gt; </span    ><span class=\"Normal Identifier\"    >AjaxConfig</span    ><span class=\"Normal NormalText\"    > ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >unit</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >             </span    ><span class=\"String\"    >&quot;jQuery.ajaxSetup&quot;</span    ><span class=\"Normal NormalText\"    > =&gt; </span    ><span class=\"Normal Identifier\"    >AjaxConfig</span    ><span class=\"Normal NormalText\"    > ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >unit</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >             </span    ><span class=\"String\"    >&quot;jQuery.contains&quot;</span    ><span class=\"Normal NormalText\"    > =&gt; </span    ><br     /><span class=\"Normal NormalText\"    >                 </span    ><span class=\"Normal Identifier\"    >J</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >Element</span    ><span class=\"Normal NormalText\"    >?</span    ><span class=\"Normal Identifier\"    >container</span    ><span class=\"Normal NormalText\"    > * </span    ><span class=\"Normal Identifier\"    >J</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >Node</span    ><span class=\"Normal NormalText\"    >?</span    ><span class=\"Normal Identifier\"    >contained</span    ><span class=\"Normal NormalText\"    > ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >bool</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >        // ...</span    ><br     /></code  ></pre><p>The use of the function would then look like this:</p><pre class=\"sourceCode ocaml\"><code  ><span class=\"Normal Identifier\"    >jQuery</span    ><span class=\"Normal NormalText\"    >.</span    ><span class=\"Normal Identifier\"    >Ajax</span    ><span class=\"Normal NormalText\"    >(</span    ><span class=\"Normal Identifier\"    >AjaxConfig</span    ><span class=\"Normal NormalText\"    >(</span    ><span class=\"Normal Identifier\"    >Async</span    ><span class=\"Normal NormalText\"    > = </span    ><span class=\"Keyword\"    >false</span    ><span class=\"Normal NormalText\"    >, ...))</span    ><br     /></code  ></pre><p>The good news are several:</p><ul><li  ><p    >This is code-generating code - repetitive patterns can be abstracted over with plain functions in F#.</p    ></li  ><li  ><p    >If a particular framework provides good documentation, this documentation can be parsed into EF values and then amended by merging it with hand-coded EF values where needed. Bindings generation is then semi-automatic.</p    ></li  ><li  ><p    >Some common code-generating patterns will come with EF. Consider <code      >Pattern.Config</code      > above which generates a new configuration object class with the given required and optional fields.</p    ></li  ><li  ><p    >Overload generation is automated. In EF, the type for a parameter that accepts either an int or a string can be spelled as <code      >T&lt;int&gt; +     T&lt;string&gt;</code      >. The framework then figures out the correct overloads.</p    ></li  ></ul><p>There is nothing particularly blog-worthy in the implementation of EF. It is mostly about figuring out the right interface (the most simple and yet diffuclt task there is). I will mention just one implementation detail I am particularly fond of. It is the use of F# operator overloading to describe method and function types. For example, these equalities are made to hold:</p><pre class=\"sourceCode ocaml\"><code  ><span class=\"Normal NormalText\"    >    </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    > -&gt; </span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    > -&gt; </span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; = </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /><span class=\"Normal NormalText\"    >    </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    > * </span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    > -&gt; </span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; = </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; * </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt; ^-&gt; </span    ><span class=\"Normal Identifier\"    >T</span    ><span class=\"Normal NormalText\"    >&lt;</span    ><span class=\"DataType CoreDataType\"    >int</span    ><span class=\"Normal NormalText\"    >&gt;</span    ><br     /></code  ></pre><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6028449519062514692-6681869517234347186?l=t0yv0.blogspot.com' alt='' /></div>"
identity: "2088,74920"
---
